{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Entrega 2  CE",
      "provenance": [],
      "authorship_tag": "ABX9TyOlafJaZQXatSnSZbXf4PQb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SantiagoAlayon/Computacion-Estadistica---Santiago-Alayon-Alayon/blob/main/Entrega_2_CE.pdf\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Lleve a codigo funcional las funciones\n"
      ],
      "metadata": {
        "id": "2ToIBt3z1rl1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ y1 = log(x) $$\n"
      ],
      "metadata": {
        "id": "7VMbBCEY2Aoi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Condiciones\n",
        "\n",
        "1. x>0 \n",
        "2. x≠0\n"
      ],
      "metadata": {
        "id": "WPs7xBc6T8iC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import log\n",
        "\n",
        "\n",
        "x=float(input('Ingrese x: '))\n",
        "\n",
        "if (x<=0):\n",
        "  print('Fuera del dominio de de la funcion')\n",
        "else:\n",
        "  z = log(x)\n",
        "  print(f'y1 es: {z}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aMMORhiW1o7v",
        "outputId": "df8e0992-3c79-4b8a-ced7-7752f8414e4d"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese x: 589\n",
            "y1 es: 6.3784261836515865\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ y2 = log(\\sqrt{x}) $$\n",
        "\n"
      ],
      "metadata": {
        "id": "MXdmYDxN4ZUa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Condiciones\n",
        "\n",
        "1. x>0 \n",
        "2. x≠0"
      ],
      "metadata": {
        "id": "68MaDgxUUOx4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import log\n",
        "from math import sqrt\n",
        "\n",
        "x=float(input('Ingrese x: '))\n",
        "\n",
        "if (x<=0):\n",
        "  print('Fuera del dominio de de la funcion')\n",
        "else:\n",
        "  z = log(sqrt(x))\n",
        "  print(f'y2 es: {z}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BXPIxMJ_Btvw",
        "outputId": "225d09b1-bd15-4208-8d36-43acfb607e03"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese x: 16\n",
            "y2 es: 1.3862943611198906\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ y3 = log (\\sqrt{(x^{2}-1)}) $$\n"
      ],
      "metadata": {
        "id": "P7c0hYE2DLKN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Condiciones\n",
        "\n",
        "1. x>1\n",
        "2. x≠1"
      ],
      "metadata": {
        "id": "SUZrFOv5Uc2i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import log\n",
        "from math import sqrt\n",
        "\n",
        "x=float(input('Ingrese x: '))\n",
        "\n",
        "if (x<=1):\n",
        "  print('Fuera del dominio de de la funcion')\n",
        "else:\n",
        "  z = log (sqrt((x**2)-1))\n",
        "  print(f'y3 es: {z}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7mZUWa0MD2ly",
        "outputId": "0d20829a-610b-469e-eb69-ada56a38b0e1"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese x: 1\n",
            "Fuera del dominio de de la funcion\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ y4= \\frac{log(\\sqrt{x-1})}{x^{2}+1} $$\n"
      ],
      "metadata": {
        "id": "CguA5aEhG4N9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Condiciones\n",
        "\n",
        "1. x>1 \n",
        "2. x≠1"
      ],
      "metadata": {
        "id": "HhmIWH1-Uy-F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import log\n",
        "from math import sqrt \n",
        "\n",
        "x = float(input('Ingrese x: '))\n",
        "if x<=1:\n",
        "  print('Fuera del dominio de la funcion')\n",
        "else:\n",
        "  z = log (sqrt(x-1)) / (x**2 +1)\n",
        "  print(f'y4 es: {z}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QWbfZK27H8JV",
        "outputId": "15ede35d-3511-4b45-b7ab-4d9f10bc6025"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese x: 10\n",
            "y4 es: 0.010877349392753562\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ y5=\\frac{x-1}{log(x)} $$"
      ],
      "metadata": {
        "id": "ijcU3V_8OdpH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Condiciones\n",
        "\n",
        "1. x>0 \n",
        "2. x≠0\n",
        "3. x≠1\n"
      ],
      "metadata": {
        "id": "8NL59JTnU8MY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import log\n",
        "from math import sqrt\n",
        "\n",
        "x = float(input('Ingrese x: '))\n",
        "if x<=0 or x==1:\n",
        "  print('Fuera del dominio de la funcion')\n",
        "else:\n",
        "  z = (x-1) / log(x)\n",
        "  print(f'y5 es: {z}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fb_bRNJjOv4r",
        "outputId": "e6324cb0-845e-41cc-b563-7e5ca2846918"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese x: 0.5\n",
            "y5 es: 0.7213475204444817\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ y6= \\frac{1}{x} + \\sqrt{x-1}  $$\n"
      ],
      "metadata": {
        "id": "Kbw2NCJJP0Wd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Condiciones\n",
        "\n",
        "1. x>1 \n"
      ],
      "metadata": {
        "id": "sljMmLptVj-M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import sqrt\n",
        "\n",
        "x = float(input('Ingrese x: '))\n",
        "if x<1:\n",
        "  print('Fuera del dominio de la funcion')\n",
        "else:\n",
        "  z = 1/x + sqrt(x-1)\n",
        "  print(f'y6 es: {z}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v6pNh3UvQG6D",
        "outputId": "ed86ed80-3930-467e-c7cd-60bab6a79dfe"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese x: 5\n",
            "y6 es: 2.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ y7 = \\frac{1}{x} + \\sqrt{x-1} - (\\frac{1}{log(\\frac{1}{x+1})}) $$"
      ],
      "metadata": {
        "id": "WaELYUBNR5iE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Condiciones\n",
        "\n",
        "2. x>1\n"
      ],
      "metadata": {
        "id": "XwSI5EBOXrwZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import sqrt\n",
        "from math import log\n",
        "\n",
        "x = float(input('Ingrese x: '))\n",
        "if x<1:\n",
        "  print('Fuera del dominio de la funcion')\n",
        "else:\n",
        "  z = (1/x) + (sqrt(x-1)) + (1/log(1/(x+1)))\n",
        "  print(f'y7 es: {z}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "57Py2IK2ZQLK",
        "outputId": "719ef05e-5d05-4269-b960-e4f76a4839c6"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese x: 0\n",
            "Fuera del dominio de la funcion\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ y8 = \\frac{2}{x^{2} +1 } $$\n"
      ],
      "metadata": {
        "id": "mMhWFwc8aweR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Condiciones \n",
        "\n",
        "Ninguna\n"
      ],
      "metadata": {
        "id": "zv6iwF8aa9uh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "x = float(input('Ingrese x: '))\n",
        "\n",
        "z = 2 / ((x**2)+1)\n",
        "print(f'y8 es: {z}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JJi0iJOCbbfP",
        "outputId": "9bdfc7ae-2540-4f4e-df73-c05be64f4467"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese x: 5\n",
            "y8 es: 0.07692307692307693\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ y9 = \\frac{1}{n} \\sum_{i=1}^{n} x_{i} $$\n"
      ],
      "metadata": {
        "id": "2zIcp4aVeDqV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x= float(input(\"Ingrese x : \"))\n",
        "n=int(input(\"Ingrese n : \"))\n",
        "\n",
        "if n >= 1:\n",
        "  summatory = []\n",
        "  for i in range(n):\n",
        "    summatory.append(x)\n",
        "    z =(1/n)*(sum(summatory))\n",
        "    print( f'y9 es:{z}')\n",
        "  else: \n",
        "    print(\"No se puede realizar la funcion con un n menor a 1\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MZWA6QmVe68y",
        "outputId": "fea8116c-72b6-43ff-bb7a-b4cd41068747"
      },
      "execution_count": 182,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese x : 7\n",
            "Ingrese n : 2\n",
            "y9 es:3.5\n",
            "y9 es:7.0\n",
            "No se puede realizar la funcion con un n menor a 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ y10 = \\frac{1}{n-1} \\sum_{i=1}^{n}(x_{i} - \\bar{x})^{2} $$\n"
      ],
      "metadata": {
        "id": "VUPF6CfVay1y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x= float(input(\"Ingrese x \"))\n",
        "n=int(input(\"Ingrese n \"))\n",
        "if n >= 1:\n",
        "  summatory = []\n",
        "  for i in range(n):\n",
        "    summatory.append((x-(x/n))**2)\n",
        "    z=(1/(n-1))*(sum(summatory))\n",
        "    print( f'y10 es:{z}')\n",
        "  else: \n",
        "    print(\"No se puede realizar la funcion con un n menor a 1\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IaDdB8Y4a3gg",
        "outputId": "6b8e3377-fe7a-46c4-ad7d-21414106ceb9"
      },
      "execution_count": 191,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese x 7\n",
            "Ingrese n 8\n",
            "y10 es:5.359375\n",
            "y10 es:10.71875\n",
            "y10 es:16.078125\n",
            "y10 es:21.4375\n",
            "y10 es:26.796875\n",
            "y10 es:32.15625\n",
            "y10 es:37.515625\n",
            "y10 es:42.875\n",
            "No se puede realizar la funcion con un n menor a 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ y11=\\frac{\\sqrt{y10}}{y9} $$"
      ],
      "metadata": {
        "id": "kLluq2ssdWfj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x= float(input(\"Ingrese x : \"))\n",
        "n=int(input(\"Ingrese n : \"))\n",
        "\n",
        "if n >= 1:\n",
        "  summatory = []\n",
        "  for i in range(n):\n",
        "    summatory.append(x)\n",
        "    y9 =(1/n)*(sum(summatory))\n",
        "    print( f'y9 es:{y9}')\n",
        "  else: \n",
        "    print(\"No se puede realizar la funcion con un n menor a 1\")\n",
        "\n",
        "x= float(input(\"Ingrese x \"))\n",
        "n=int(input(\"Ingrese n \"))\n",
        "if n >= 1:\n",
        "  summatory = []\n",
        "  for i in range(n):\n",
        "    summatory.append((x-(x/n))**2)\n",
        "    y10=(1/(n-1))*(sum(summatory))\n",
        "    print( f'y10 es:{y10}')\n",
        "  else: \n",
        "    print(\"No se puede realizar la funcion con un n menor a 1\")\n",
        "\n",
        "z=(y10**1/2)/(y9)\n",
        "\n",
        "print(f'y11 es:{z}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zij4mrYKdlLy",
        "outputId": "92eacb6a-e3c0-4dba-9572-36316cc59c0b"
      },
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese x : 5\n",
            "Ingrese n : 8\n",
            "y9 es:0.625\n",
            "y9 es:1.25\n",
            "y9 es:1.875\n",
            "y9 es:2.5\n",
            "y9 es:3.125\n",
            "y9 es:3.75\n",
            "y9 es:4.375\n",
            "y9 es:5.0\n",
            "No se puede realizar la funcion con un n menor a 1\n",
            "Ingrese x 7\n",
            "Ingrese n 8\n",
            "y10 es:5.359375\n",
            "y10 es:10.71875\n",
            "y10 es:16.078125\n",
            "y10 es:21.4375\n",
            "y10 es:26.796875\n",
            "y10 es:32.15625\n",
            "y10 es:37.515625\n",
            "y10 es:42.875\n",
            "No se puede realizar la funcion con un n menor a 1\n",
            "y11 es:4.2875\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Construya una funcion que returne la varianza de un conjunto de datos (n ≥ 2) cuando se va incorporando dato a dato. Use como primer par de datos los que se generan de la distribuci ́on normal con μ = 3 y s = 0,3.Use la misma semilla y los mismos parametros de la distribucion para incorporar cada dato. Haga el proceso  50 veces y luego grafique la varianza como funcion de n."
      ],
      "metadata": {
        "id": "GfmH35Wshj2O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def variance(n):\n",
        "  random.seed(123)\n",
        "  if n < 2: \n",
        "    return f'El conjunto de datos debe tener 2 o más datos'\n",
        "  else:\n",
        "      var=np.random.normal(3,0.3,2)\n",
        "      list_var=[var[0],var[1]]\n",
        "      list_g=np.random.normal(3,0.3,n)\n",
        "      for i in range (n):\n",
        "        list_var.append(list_g[i])\n",
        "        print(f'La varianza es {round(np.var(list_var),4)},cuando n es {i+1}')\n",
        "\n",
        "variance(50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "8c6fkJEhPPGE",
        "outputId": "5a1e68f8-c836-4b84-fc79-4fe4f7b4f577"
      },
      "execution_count": 199,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-199-a19bafd0c862>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'La varianza es {round(np.var(list_var),4)},cuando n es {i+1}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mvariance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-199-a19bafd0c862>\u001b[0m in \u001b[0;36mvariance\u001b[0;34m(n)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mvariance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mseed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m123\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;34mf'El conjunto de datos debe tener 2 o más datos'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'random' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## La cantidad de radiacion absorbida puede medirse por la transmitancia. La relacion entre transmitancia (T) y absorbancia (A) esta dada por la ley Beer-Lambert (ley de Beer). Cree una funcion para la expresion que aparece en https://www.electrical4u.com/what−is−transmittance/ y genere unos datos de T para determinar A. Grafique la funcion. Finalmente lea la seccion titulada: ✭✭Why is Absorbance the Preferred Unit Over Transmittance?✮✮ (buscar el link desde el buscador)##\n",
        "\n"
      ],
      "metadata": {
        "id": "z57bbSw4hqH5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "FUNCION PARA LA LEY DE BEER-LAMBERT (LEY DE BEER)\n"
      ],
      "metadata": {
        "id": "gb79vJ-2svyt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import log10\n",
        "\n",
        "porcentaje_de_T = float(input('Ingrese porcentaje_de_T: '))\n",
        "\n",
        "z = 2 - (log10(porcentaje_de_T))\n",
        "\n",
        "print(f'A es: {z}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LJZ7eyRenzNl",
        "outputId": "52ffd3c5-de2d-4cc6-e284-05ee837262d5"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese porcentaje_de_T: 100\n",
            "A es: 0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "GRAFICA DE TRANSMITANCIA Y ABSORBANCIA\n"
      ],
      "metadata": {
        "id": "cEwyzd1Zs61D"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Con los porcentajes de transmitancias teoricas de  1%,25%,50%,75%,100% se calculan las respectivas absorbancias y se grafican\n",
        "\n"
      ],
      "metadata": {
        "id": "pXgPXRsOt_vw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "x=[1,25,50,75,100]\n",
        "y=[ 2,0.6020599913279623,0.30102999566398125,0.1249387366082999,0]\n",
        "plt.plot(x,y)\n",
        "plt.xlabel('% de transmitancia')\n",
        "plt.ylabel('Absorbancia')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "LM09CiujtFVr",
        "outputId": "b8f10ce4-547c-494e-f32c-10cedb729377"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}